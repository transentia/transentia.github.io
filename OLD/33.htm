<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Transentia - transentia pty. ltd.; development, consulting, training at the leading-edge of technology</title>
  <link rel="stylesheet" type="text/css" media="screen, print, handheld" href="wp-content/themes/transentia/css/site.css">
</head>
<body>
  <div id="page">
    <div id="header">
      <p><a href="../index.htm"><img src="wp-content/uploads/widgets/transentia-logo-red-glow.gif" border="0"></a></p>
      <p class="old-content">transentia's old content; click on the logo to return to the new content</p>
      <p id="blog-description">transentia pty. ltd.; development, consulting, training at the leading-edge of technology</p>
    </div><!-- #header -->
    <div id="content">
      <div class="pagination">
        <span class="next"><a href="34.htm">Next »</a></span> <span class="previous"><a href="32.htm">« Previous</a></span>
      </div>
      <div class="post hentry">
        <a id='0'></a><h1 class="entry-title">That Vision Thing</h1>
        <div class="entry-content">
          <p>This is a bit of a ramble, but it does hit its points, so here goes…</p>
          <p>I was just watching <a href="http://en.wikipedia.org/wiki/Mark_Williams_(actor)">Mark Williams'</a> Industrial Revelations, which aired on the <a href="http://www.discoverychannel.co.uk/au/">Discovery Channel</a> last night.</p>
          <p>I love the show and its subject matter: I am always entranced by the oily, noisy, lumps of steel, brass and leather, the ingenuity of the designers and builders and the sheer daring of the project sponsors.</p>
          <p>The section on the construction of the <a href="http://www.cromfordcanal.org.uk/">Cromford Canal</a> activated my muse. The canal was built by Sir Richard Arkwright (who was one of the richest people in the world at his death) to bring
          raw cotton from Liverpool to his mills. As business boomed, the capacity of the canal was filled and so the <a href="http://www.wirksworth.org.uk/CHPR.htm">Cromford and High Peak Railway</a> was constructed to allow expansion to continue.
          The machinery (beautiful steam engines, etc.) continues working to this day; although it has been rendered obsolete by changes of fortune, it has not failed.</p>
          <p>Interestingly, the canal was built by one generation and the railway built by a second generation of the same family: William Jessop and his son, Josias.</p>
          <p>This got me thinking: about how many times I have been given a brief along the lines of "we know that the system is stuffed and needs to be completely upgraded, but we don't want (dare/can afford) to change it, so please just twiddle
          around the edges and keep it plodding along." I have worked on code that has also been touched by older/younger siblings (roughly equivalent to different generations in "IT years"…); my brief was to fix but not change, the unspoken
          attitude was "it ain't broke, really, so don't change it" or "she'll be right, mate" or perhaps even "it's close enough for Government work."</p>
          <p>Let's go back: Josias didn't try to simply fix up his father's canal (widen it, make the horses move a bit faster, put lighting along it to ensure that 24-hour operation was possible, maybe play around with a few other tweaks); he was
          brave enough to say "we need a new approach, we need this new technology, so bring on the railway."</p>
          <p>How different these attitudes are!</p>
          <p>Sadly, I feel that the spirit, the vision, the <em>will</em> to do this has vanished from our society. We seem to be too fat and comfortable, too <a href="http://www.merriam-webster.com/dictionary/intransigent">intransigent</a>, too
          resistant to even the smallest change to actually do much of anything worthwhile, it seems.</p>
          <p>Here in Sunny Brisbane, I have seen people tearfully protesting because a nearby roadside noise barrier was painted red by the council. The affected residents seemingly couldn't say what colour was actually appropriate, but they knew
          that their world was going to implode as a result of having a red barrier.</p>
          <p>As in life, so in the IT world.</p>
          <p>I have seen (and been a part of) research institutions set up and then left to gradually wither on the vine; I have seen (and been a part of) software engineering 'Incubators' set up and then almost instantly destroyed by the threat of
          a punitive tax ruling. There's no driving force, no grand plan to force these things along so instead they just churn away in the background and the best that one seems to be able to achieve is a <a href=
          "http://www.wisegeek.com/what-is-a-zero-sum-game.htm">zero-sum game</a>.</p>
          <p>Take a look at the way the Australian IT job market has developed over the past few years: there seem to be a multitude of positions for project managers, analysts, documenters, support personnel, etc. There are very few for developers
          and those that are out there are for junior-grade people. <strong>My</strong> conclusion from this is that nobody is doing anything new, the PMs, analysts, etc. are all working in holding patterns but not pushing anything forward. We seem
          to be restricted to cutting the grass on the banks of the canal, hoping that will improve things. We <em>need</em> the railway engineer.</p>
          <p>I can't help but think back to the amazing achievements of the Industrial Revolution, many of which still stand even today. Consider how London is still benefiting from its city-spanning <a href=
          "http://www.tfl.gov.uk/modalpages/2625.aspx">underground</a> system (opened in 1863)…</p>
          <p>Would the underground get built today? We have vastly superior technology so it would be simpler to achieve, but would the initial proposal even get past the "first post"?</p>
          <p>I think not.</p>
          <p>Here in Brisbane, we are abandoning capital works like rail corridors, roads (even simple road upgrades) and <a href="http://www.news.com.au/couriermail/story/0,23739,24823527-952,00.html">tunnels</a> left, right and centre.</p>
          <p>The Powers That Be claim that this is "due to the 'credit crunch' and the other impacts of the financial crisis."</p>
          <p>I say that this is truly due to a lack of drive, of will, of <em>vision</em>. Perhaps it is about abandoning the future, as well?</p>
          <p>I wonder if Richard Arkwright would have said "OK, I don't have the money in my pocket today, so I'll wait." I suspect he actually would have said "I stand to make a sh*tload of <a href=
          "http://dictionary.reference.com/browse/motza">motza</a> by this…bring it on."</p>
          <p>Back to the IT world again: where is the Ozzie Google, Facebook, Amazon? These organisations don't depend on the presence of natural resource, they aren't restricted by national boundaries so why hasn't Australia-which is well-known as
          an early adopter of (other people's) technology-got its act together? We do have <a href="http://www.wotif.com.au">wotif</a>, I am happy to say; we should have many more wotifs.</p>
          <p>Having seen China's massive change and ongoing development over the last 20 years, I can't help but come to the conclusion that we are seeing the rise of a new industrial power and of a new people who "can do."</p>
          <p>China (and India, and to lesser degrees Thailand, Vietnam, Malaysia, Singapore, …) is also beginning to think big and build for the future. They aren't abandoning their future, they are preparing for it, shaping it.</p>
          <p>Truly, we complacent Ozzies (and brits and yanks, etc.) are going to be left well and truly behind.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Rant</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <a id='1'></a><h1 class="entry-title">The Curious Cat</h1>
        <div class="entry-content">
          <p>This is an interesting (if slightly stale) site: <a href="http://curiouscat.com/guides/">The Curious Cat</a>.</p>
          <p>While interesting in its own right, it also provides a nice jumping-off point for other points of interest such as <a href="http://curiouscat.com/guides/deming.cfm">Deming Connections</a>, <a href="http://www.mistakeproofing.com/">John
          Grout's Mistake-Proofing Center</a> and <a href="http://mumak.net/stuff/your-code-sucks.html">Your Code Sucks and I Hate You: The Social Dynamics of Code Reviews</a>.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Agile, Tools</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <a id='2'></a><h1 class="entry-title">Perhaps I'll Open a Bag Shop…</h1>
        <div class="entry-content">
          <p>…'cos here's another one from the pile:</p>
          <p><img src="wp-content/uploads/2009/01/11012009065.jpg"></p>
          <p>I remember that <em>months</em> of deliberation went into the phrase "People, Places, Things"; the phrase was <strong>supposed</strong> to act as a rallying call to give the research a tangible direction. I was never sure how a random
          collection of nouns was supposed to achieve this but it was probably as good (and <a href="http://curiouscat.com/deming/eliminateslogans.cfm">as effective</a>) as <a href="http://news.bbc.co.uk/1/hi/business/5036084.stm">any other
          slogan</a>.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Retrospectives</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <a id='3'></a><h1 class="entry-title">The Cleanup Continues…</h1>
        <div class="entry-content">
          <p>…and I found another DSTC-related T-Shirt; this one comes from the wrap-up party that was thrown to celebrate DSTC's demise. Take a look:</p>
          <p><img src="wp-content/uploads/2009/01/dsc03123.jpg"></p>
          <p>Although my personal opinion is that DSTC was not a successful endeavor, I will restate an earlier opinion/question: where is Australian (IT) Research? The Australian media is always claiming that Australia <a href=
          "http://sciencecareers.sciencemag.org/career_magazine/previous_issues/articles/2006_09_20/science.opms.r0600019">punches</a> above its <a href=
          "http://www.independent.co.uk/opinion/commentators/john-howard-why-we-punch-above-our-weight-537182.html">weight</a> at sports, at warfare (sorry: <em>peacekeeping activities</em>), at media-related activities, etc. so why aren't we
          punching above our weight here? Well…no…<strong>dont</strong> get me started. <em><strong>Really</strong></em>!</p>
          <p>Oh wow! Look what else the cleaning uncovered: a genuine JavAus98 bag!</p>
          <p><img src="wp-content/uploads/2009/01/javaus98bag.jpg"></p>
          <p>I had a hand in organising and presenting at both JavAus98 and JavAus99. Although these events have both faded from memory (they cant even be found at the <a href="http://www.archive.org/web/web.php">wayback machine</a>), they were fun.
          Java was 'new' and 'buzzing' and was about to change the IT world as we knew it ( ;-) )…</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Retrospectives</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <a id='4'></a><h1 class="entry-title">Ah! Memories!</h1>
        <div class="entry-content">
          <p>I have been doing the annual "New Year's Clean-Up" (what my <a href="http://mrjam.typepad.com/">Hongkie</a> wife calls "dai so choi [<img src="wp-content/uploads/2009/01/dai-so-choi.gif" alt="" title="dai-so-choi" width="111" height=
          "16" style='vertical-align:middle;border:0;margin:0;'>]") and I found an old T-Shirt. Take a look:</p>
          <p><img src="wp-content/uploads/2009/01/dstc-t-shirt-front.jpg" width="50%"></p>
          <p><img src="wp-content/uploads/2009/01/dstc-t-shirt-back.jpg" width="50%"></p>
          <p><img src="wp-content/uploads/2009/01/dstc-t-shirt-quote.jpg" width="50%"></p>
          <p>This was a nice bit of political grandstanding by the fairly-new <a href="http://en.wikipedia.org/wiki/Rob_Borbidge">Borbidge</a> Liberal Government of Queensland, attacking <a href=
          "http://web.archive.org/web/19981212013710/http://dstc.edu.au/">DSTC</a>, the research organisation that I was then working for.</p>
          <p>Happily, that little political experiment didn't last too long!<br>
          <em>(edit: I meant the Borbidge government, but I guess I could say the same about DSTC itself…)</em></p>
          <p>Sadly, we still don't have strong government support for IT or any other 21st century technology in Queensland…think about the current <a href="http://www.australianit.news.com.au/story/0,24897,24715607-15319,00.html">absurd National
          Broadband Network debacle</a> and then compare and contrast with <a href="http://blog.wired.com/wiredscience/2007/08/an-amazing-disp.html">Singapore</a>, <a href="http://www.incubator.sh.cn/en/">Shanghai</a>, <a href=
          "http://www.zdnet.com.au/tag/mumbai-technology.htm">Mumbai</a>, etc.</p>
          <p>It seems that all flavours of <a href="http://www.australianbeers.com/culture/politics.htm">Australian pollie</a> are simply content to keep doing nothing <a href=
          "http://www.theage.com.au/cgi-bin/common/popupPrintArticle.pl?path=/articles/2008/01/03/1198949983398.html">more demanding</a> than digging and shipping our <a href="http://en.wikipedia.org/wiki/Coal_mining_in_Australia">dirt</a>
          overseas…</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Retrospectives</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <a id='5'></a><h1 class="entry-title">Head(ing) in(to) the Clouds</h1>
        <div class="entry-content">
          <p>That's me, all right, <a href="http://www.youtube.com/watch?v=95AEzyWZX8I">always dreaming</a>!</p>
          <p>Waaaaay back in the far-gone days of the late 1990s and early 2000s I was involved in a project to build a distributed object-based system for a small (to remain nameless) Queensland business. We built it, schlepped it around, set up a
          demo/trial testbed and got a fair bit of interest. We even made the first steps to getting a patent (I have <em>no idea</em> what happened to <em>that</em>). Somehow however, it didn't quite take off and anyway the bubble and social
          phenomenon that was <strong>The Internet</strong> burst and so interest quickly evaporated.</p>
          <p>All that work :-(</p>
          <p>Such is life!</p>
          <p>Getting a testbed up and running was (<a href="http://www.thefreedictionary.com/ahem">ahem</a>) 'interesting': we had to buy a dedicated server and round up an old box to act as a firewall, arrange for a tame organisation to host them
          for us (one of our backers helped us out there…), configure the pair appropriately, get the darned kit on the 'net (easy to say but this was the time of the 33.6Kbps modem, remember; those things were not known for their reliability), and
          so on. Not the easiest thing to do and definitely not core to what we wanted to be doing.</p>
          <p>Things are <strong>so much easier</strong> these days. <a class="externlink" title="Go to http://au.youtube.com/MontyPython" href="http://au.youtube.com/MontyPython">Why, back in <em>my</em> day, we…</a>.</p>
          <p>I have just had a play with <a href="http://www.stax.net">http://www.stax.net</a>. This gives a glimpse of <a href="http://en.wikipedia.org/wiki/Platform_as_a_service">Platform As A Service</a>.</p>
          <p>According to <a href="http://www.techcrunch.com/2008/12/16/stax-networks-launches-google-app-engine-for-java/">TechCrunch</a>, Stax is:</p>
          <blockquote>
            <p>…built on top of Amazon EC2 and allows developers to create, text and deploy Java applications without having to build out their own physical infrastructure.</p>
            <p>For now Stax isn't charging users at all. Eventually they'll move to a model that charges for resources uses, similar to EC2 and other infrastructure platforms.</p>
          </blockquote>
          <p>At the moment, Stax is in beta test and one has to sign up to get an "invitation code" so that the stax guys can control demand appropriately. I got my code within a few days of making my application.</p>
          <p>There are other similar facilities such as <a href="http://mor.ph/java/">Morph AppSpace for Java</a>; the buzz is that this is more mature so I may give this a <a href="http://www.abc.net.au/newsradio/txt/s1998581.htm">burl</a> later
          on.</p>
          <p>Stax is based on <a href="http://aws.amazon.com/ec2/">Amazon Elastic Compute Cloud (Amazon EC2)</a>:</p>
          <blockquote>
            <p>Amazon EC2 presents a true virtual computing environment, allowing you to use web service interfaces to launch instances with a variety of operating systems, load them with your custom application environment, manage your network's
            access permissions, and run your image using as many or few systems as you desire.</p>
          </blockquote>
          <p>In what is pretty much the simplest possible test, I downloaded the <a href="http://stax-downloads.s3.amazonaws.com/sdk/stax-sdk-0.2.13-dist.zip">Stax SDK</a>, took my earlier Pokie/Drools example and uploaded it to Stax.</p>
          <p>Since grails is not officially supported quite yet, I followed <a href="http://wiki.stax.net/w/index.php/Grails">the instructions here</a>.</p>
          <p>It worked! Right out of the box! Take a look at the URL…</p>
          <p><img src="wp-content/uploads/2008/12/stax-pokie-example.jpg"></p>
          <p>There is a rudimentary console that lets you control your application, invite new development team members, etc.. Nothing special but it gets the job done:</p>
          <p><img src="wp-content/uploads/2008/12/stax-console.jpg"></p>
          <p>Uploading the application was a bit slow (probably due to my internet connection, rather than anything Stax-related) and the application is pretty simple (no database at all, for instance) but I instantly found myself reminiscing about
          that earlier project. How much simpler setting up a testbed would have been, how many kilometers of modem-nastiness-related driving I would have saved, how easily I could have demoed new iterations to the client, etc., etc.</p>
          <p>Kids these days <a href="http://www.house.org/islandmacguy/kids_have_it_easy.html">have got it too easy</a> :-)</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Grails, Programming</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <a id='6'></a><h1 class="entry-title">A Piccy From the Past</h1>
        <div class="entry-content">
          <p>I came across this piccy a while back and thought that I would preserve it for posterity:</p>
          <p><img src="wp-content/uploads/2008/12/me-in-java-course.jpg"></p>
          <p>It shows me teaching Java to a group of QUT students taking a summer course. At the time of the photo (likely summer 1999), I was working at the now-defunct Distributed Systems Technology Centre's QUT offices. The photo shows the DSTC
          training room at QUT; through the door behind me was a load of SGI boxes donated on the premise (apparently) that DSTC would help SGI 'rule' the Internet.</p>
          <p>Ah…memories!</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Retrospectives</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <a id='7'></a><h1 class="entry-title">One Source to (D)Rool Them All…</h1>
        <div class="entry-content">
          <p><em>[edit: 12 May, 2009]</em><br>
          Whoopee! At least one person has read this posting:</p>
          <blockquote>
            <p>Thanks Bob for great article on drools/grails. It is very useful.</p>
            <p>regards<br>
            zys</p>
          </blockquote>
          <p>I've wanted to get onto this for a while now, so here goes.</p>
          <p>The "State of the Art" application is generally a real dog's breakfast. Sure, we all create our nice MVC-based applications using the Spring framework, or JBoss SEAM or even good-old Struts and we feel pretty good about it but let's
          face it: the typical MVC application is actually a pretty nasty thing that is not MVC at all.</p>
          <p>Here's one <a href="http://en.wikipedia.org/wiki/Etiology">aetiology</a>…I'm sure you will recognise it.</p>
          <p>Andy the Architect comes in and specs out a nicely structured work of art. On paper, it is clean and tidy with clearly separated layers and distint responsibilities. Then a few <a href=
          "http://jonasboner.com/2008/12/09/real-world-scala-managing-cross-cutting-concerns-using-mixin-composition-and-aop/">cross-cutting concerns</a> muddy the waters a bit but no problem, things are still lookin' good. Then Joe the Developer
          comes along and starts building. Except in the <a href="http://www.codinghorror.com/blog/archives/001198.html">interests of performance</a> it becomes vital that some processing is moved into stored procedures. Well, OK, there is still a
          logical mapping in the architecture. Joe <a href="http://www.phrases.org.uk/meanings/319800.html">shuffles</a> off the project and Freda arrives. Freda wasn't privy to those early days when the architecture was decided upon and when the
          <a href="http://dictionary.reference.com/browse/rationalisation">rationalisation (sense 2)</a> surrounding the decision to use stored procedures was fresh in everyone's mind and so decides to implement a nice, clean separate module for her
          work. Time progresses, the business changes and expands and suddently Bill is brought in to help out Freda. Of course both Freda and Bill can't work on the same module so it is split. Bill is an old war-hardened JSP developer but is not
          really <a href="http://idioms.thefreedictionary.com/be+au+fait+with">au-fait</a> with the system's backend and so another, JSP-oriented and (subtly?) different approach is brought to bear.</p>
          <p>And so it goes.</p>
          <p>This effect is seen most keenly with respect to the mechanisms of data access/searching/filtering: Joe is happy to spend a day working how to use n-level nested selects with carefully decided-upon projections, etc. to ensure that what
          he pulls from the database is precisely and only what he needs whereas Bill-more cognizant of approaching deadlines, perhaps-just grabs everything and iterates across the result set, rejecting 90% but getting what he needs. The code is
          quick and easy to write, however ;-)</p>
          <p>The effect is also a major issue when one considers the business rules that underly most, if not all, applications. It is depressingly common to see the aetiology considered earlier resulting in rules split across an application's
          database, webservice, controller and view (it is also depressingly common to see these layers implemented variously in different technologies, but that is a rant for another time).</p>
          <p>Recognising the drawbacks of traditional MVC <a href="http://msdn.microsoft.com/en-us/magazine/cc188690.aspx">some</a> have <a href="http://martinfowler.com/eaaDev/ModelViewPresenter.html">adopted</a> the idea of MVP (Model View
          Presenter) as a way of saying "make sure that your view layer is <em>only</em> about the UI." The idea of <a href="http://en.wikipedia.org/wiki/Anemic_Domain_Model">anaemic domain</a> as anti-pattern still rules the roost and is frequently
          used to justify the messiness that I am trying to highlight here.</p>
          <p>In the J2EE world, it used to be said that "stored procedures should migrate to Session Beans" and there was a lot of truth in this. After all, to <a href="http://docs.jboss.org/seam/2.0.2.SP1/reference/en-US/html_single/">quote</a>
          Michael Juntao Yuan, author of <a href="http://my.safaribooksonline.com/9780137151660/ch31">Seam Framework: Experience the Evolution of Java EE, Second Edition</a>:</p>
          <blockquote>
            <p>In almost all enterprise applications, the database is the primary bottleneck, and the least scalable tier of the runtime environment. People from a PHP/Ruby environment will try to tell you that so-called "shared nothing"
            architectures scale well. While that may be literally true, I don't know of many interesting multi-user applications which can be implemented with no sharing of resources between different nodes of the cluster. What these silly people
            are really thinking of is a "share nothing except for the database" architecture. Of course, sharing the database is the primary problem with scaling a multi-user application-so the claim that this architecture is highly scalable is
            absurd, and tells you a lot about the kind of applications that these folks spend most of their time working on.</p>
            <p>Almost anything we can possibly do to share the database less often is worth doing.</p>
          </blockquote>
          <p>Sadly however, trying to persuade someone fixated on the 'fact' that "stored procedures are faster" is usually a lost cause; one can talk about clean design and easier maintenance, fewer <a href=
          "http://books.google.com/books?id=dFlK6nA-QOEC&amp;pg=PA106&amp;lpg=PA106&amp;dq=technological+impedance&amp;source=bl&amp;ots=PvFTUvwQz3&amp;sig=SMGpsg-viM5Mlzdw4k5E2kFqkbk&amp;hl=en&amp;ei=5iEJSojZDZfqtQPmsqXnCA&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=1">
          technology</a> and <a href="http://www.agiledata.org/essays/culturalImpedanceMismatch.html">cultural</a> <a href="http://www.stephenforte.net/PermaLink,guid,1f988309-0969-4115-8e09-77c746a32f57.aspx">impedance mismatches</a>, the benefits
          of integrated security and monitoring, the ease of clustering and so on but one's arguments always seem to fall short, as measured by the yardstick of a mental stopwatch. Such is life…</p>
          <p>What if one could centralise all the messy rules that are typically spread throughout a system into one clearly-separated subsystem. This is what <a href="http://www.jboss.org/drools/">JBoss' Drools</a> (now <em>JBoss Rules</em>) aims
          to enable and-ranting aside-is the actual focus of this post.</p>
          <p>Welcome to Bob's <a href="http://en.wikipedia.org/wiki/Slot_machine">Pokie</a> machine!</p>
          <p><img src="wp-content/uploads/2008/12/pokie-lose.jpg"></p>
          <p><em>Before we start, please note that I do <strong>not</strong> like these damn things <a href="http://www.theage.com.au/national/inaction-over-pokies-spending-angers-senators-20081110-5lpw.html">at</a> <a href=
          "http://www.news.com.au/couriermail/comments/0,23836,24308123-23272,00.html">all</a>. They are a scourge on the social groups least able to resist them, IMHO. For once I agree with <a href=
          "http://business.scotsman.com/gambling/Russell-Crowe-gets-gladiatorial-over.3640387.jp">Russell Crowe!</a></em></p>
          <p>A pokie is essentially simple but has a number of rules regarding when payment is to be made to the punter and when the house should <a href="http://www.imdb.com/title/tt0065063/">take the money and run</a>.</p>
          <p>Bob's Pokie is written using <a href="http://www.grails.org">Grails</a>. It is <strong>very,very simple</strong>!</p>
          <p><img src="wp-content/uploads/2008/12/pokie-stats.jpg"></p>
          <p>The design goes something like: "A Pokie has a spindle with 3 reels. After each spin, the value of each reel is obtained and the overall results evaluated to determine whether the spin has produced a win or a losing result." From this,
          we get a single simple GSP and a number of simple objects: Spindle, Reel, EvaluatorResult, EvaluatorService and PokieController.</p>
          <p>It is probably worth taking a quick tour around the source, starting with the GSP:</p>
          <pre>
&lt;%@ page contentType="text/html;charset=UTF-8" %&gt;
&lt;html&gt;
  &lt;head&gt;&lt;title&gt;Bob' Pokie&lt;/title&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Bob's Pokie&lt;/h1&gt;
    &lt;p&gt;Guaranteed to eat all your money, "but don't you worry about that"&lt;/p&gt;
    &lt;g:form controller = "pokie" action = "play"&gt;
      &lt;g:select name = "leftReel" from = "${1..5}" value = "${session.spindle?.spindle.leftReel.value}" multiple="multiple" size="5" /&gt;
      &lt;g:select name = "middleReel" from = "${1..5}" value = "${session.spindle?.spindle.middleReel.value}" multiple="multiple" size="5" /&gt;
      &lt;g:select name = "rightReel" from = "${1..5}" value = "${session.spindle?.spindle.rightReel.value}" multiple="multiple" size="5" /&gt;
      &lt;br /&gt;
      &lt;g:submitButton name="spin" value="Spin" /&gt;
    &lt;/g:form&gt;
    &lt;g:if test="${session.evaluatorResult == pokie.EvaluatorResult.INACTIVE}"&gt;Give it a spin...&lt;/g:if&gt;
    &lt;g:elseif test="${session.evaluatorResult == pokie.EvaluatorResult.LOSE}"&gt;You Lose :-(&lt;/g:elseif&gt;
    &lt;g:elseif test="${session.evaluatorResult == pokie.EvaluatorResult.SMALLWIN}"&gt;You Win. Just.&lt;/g:elseif&gt;
    &lt;g:elseif test="${session.evaluatorResult == pokie.EvaluatorResult.BIGWIN}"&gt;You Win...BIGTIME!&lt;/g:elseif&gt;
    &lt;g:else&gt;Oh Dear! Something (${session.evaluatorResult}) went wrong here&lt;br /&gt;&lt;g:link action="index"&gt;Start Over&lt;/g:link&gt;
    &lt;script type="text/javascript"&gt;
      document.getElementById('spin').disabled = true
    &lt;/script&gt;&lt;/g:else&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>
          <p>The associated controller is, in true Grails style, very simple:</p>
          <pre>
class PokieController {
  def evaluatorService

  def index = {session.spindle = new pokie.Spindle(); session.spindle.reset(); redirect(action: show) }

  def show = { session.evaluatorResult = evaluatorService.evaluate(session.spindle) }

  def play = {session.spindle.activate(); redirect(action: show) }
}
</pre>
          <p>A Spindle is pretty much simply a collection of Reels:</p>
          <pre>
package pokie;

public class Spindle {
  private final spindle = [leftReel: new Reel(), middleReel: new Reel(), rightReel: new Reel()]

  private initialised = false;

  def reset = { initialised = false; spindle.each { k, v -&gt;  v.reset() } }

  def activate = { initialised = true; spindle.each { k, v -&gt; v.activate() } }

  def getSpindle = { Collections.unmodifiableList(spindle) }
}
</pre>
          <p>A Reel is:</p>
          <pre>
package pokie;

public class Reel {
  final rand = new Random()

  int value

  private rint = { rand.nextInt(5) + 1  }

  def reset = { value = 3 }

  def activate = { value = rint() }
}
        </pre>
          <p>For completeness, here is EvaluatorResult, a standard enum:</p>
          <pre>
package pokie

public enum EvaluatorResult {
  INACTIVE, LOSE, BIGWIN, SMALLWIN, OTHER
}
</pre>
          <p>The first attempt at making EvaluatorService will ignore Drools and do everything "by hand." Here goes:</p>
          <pre>
import pokie.EvaluatorResult

public class EvaluatorService {
  static transactional = false

  // a SMALLWIN is: all 3 reels show the same value
  // A BIGWIN is: all 3 reels have the value 3
  // everything else is a LOSE
  static evaluate = {spindle -&gt;
    if (!spindle.initialised)
      return EvaluatorResult.INACTIVE;

    def firstVal = spindle.leftReel.value
    if (spindle.find {k, v -&gt; v.value != firstVal} != null)
      return EvaluatorResult.LOSE

    return firstVal == 3 ? EvaluatorResult.BIGWIN : EvaluatorResult.SMALLWIN
  }
}
</pre>
          <p>Nothing special here; the code is small, straightforward and easy to understand, right?</p>
          <p>Yes and no.</p>
          <p>Looking through the code, I see a couple of 'if' statements and a bit of searching through a collection. In fact there is <em>absolutely nothing</em> to tell me that here is <em>the key set</em> of business rules. Unfortunately enough,
          it is the comment that gives the only real clue. Truly this is not good and we need to try harder.</p>
          <p>Consider too, that it may be neccessary to get a Product Owner or domain specialist to review the rules (something that <a href=
          "http://www.olgr.qld.gov.au/resources/gamDocs/randomNumberGeneratorsMinimumTechnicalRequirementsVerOne3.pdf">may actually be required for a Pokie</a> in Queensland). My guess is that not too many domain specialists are going to understand
          even simple code like that in EvaluatorService.</p>
          <p>Drools helps by providing a general-purpose rules engine, based on <a href="http://downloads.jboss.com/drools/docs/4.0.7.19894.GA/html/ch02.html#d0e376">some pretty clever ideas</a>, which allows for rules to be specified in ways other
          than pure code. Drools allows for rules to be written in XML, the "near english" DRL or even Spreadsheet-based Decision Tables. There is also <a href="http://blog.athico.com/2008/12/drools5-m3-release-notes.html">an extensive toolset</a>
          supporting Drools with editors, debuggers, etc..</p>
          <p>Take a look a the DRL corresponding to the evaluation that we have just used:</p>
          <pre>
package pokie;

rule "Other"
     salience -1000
     dialect "mvel"
     lock-on-active
     activation-group "pokie"
  when
      e : Evaluation(initialised == true)
  then
     modify ( e ) { result = EvaluatorResult.OTHER };
end

rule "Pokie is Initialising"
     salience -1
     dialect "mvel"
     lock-on-active true
     activation-group "pokie"
  when
      e : Evaluation(initialised == false)
  then
     modify ( e ) { result = EvaluatorResult.INACTIVE };
end

rule "Big Win"
     salience 2
     dialect "mvel"
     lock-on-active
     activation-group "pokie"
  when
      e : Evaluation(initialised == true,
                          (leftReelValue == middleReelValue) &amp;& (leftReelValue == rightReelValue) &amp;& (leftReelValue == 3))
  then
     #System.out.println( "Big Win" );
     modify ( e ) { result = EvaluatorResult.BIGWIN };
end

rule "Small Win"
     salience 1
     dialect "mvel"
     lock-on-active
     activation-group "pokie"
  when
      e : Evaluation(initialised == true,
                          (leftReelValue == middleReelValue) &amp;& (leftReelValue == rightReelValue))
  then
     modify ( e ) { result = EvaluatorResult.SMALLWIN };
end

rule "Losing"
     salience 0
     dialect "mvel"
     lock-on-active
     activation-group "pokie"
  when
      e : Evaluation(initialised == true)
  then
     modify ( e ) { result = EvaluatorResult.LOSE };
end
</pre>
          <p>Much more verbose, of course but also probably clearer, especially once one becomes familiar with the ideas of <em>salience</em> (basically a rule's weight or priority), <em>activation-group</em> (only one rule in an activation-group is
          allowed to become active at any time) and <em>lock-on-active</em> (don't reevaluate the ruleset after a modify has executed).</p>
          <p>With the exception of the way that data is packaged up into an Evaluation instance for the ruleset to use, the code that handles rule evaluation is pretty much <a href=
          "http://en.wikipedia.org/wiki/Boilerplate_(text)">boilerplate</a>:</p>
          <pre>
import org.drools.KnowledgeBase
import org.drools.KnowledgeBaseFactory
import org.drools.builder.KnowledgeBuilder
import org.drools.builder.KnowledgeBuilderFactory
import org.drools.builder.ResourceType
import org.drools.definition.KnowledgePackage
import org.drools.io.ResourceFactory
import org.drools.runtime.StatefulKnowledgeSession
import pokie.Evaluation

public class EvaluatorService {
  static final RULES = 'pokie.drl'
  static transactional = false

  def evaluate = {spindle -&gt;

    def kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();

// this will parse and compile in one step
    kbuilder.add(ResourceFactory.newClassPathResource(RULES,
            EvaluatorService.class), ResourceType.DRL);

// Check the builder for errors
    if (kbuilder.hasErrors()) {
      def errs = kbuilder.getErrors().toString()
      def msg = "Unable to compile '${RULES}': ${errs}"
      log.error (msg);
      throw new RuntimeException(msg);
    }

// get the compiled packages (which are serializable)
    def pkgs = kbuilder.getKnowledgePackages();

// add the packages to a knowledgebase (deploy the knowledge packages).
    def kbase = KnowledgeBaseFactory.newKnowledgeBase();
    kbase.addKnowledgePackages(pkgs);

    def ksession = kbase.newStatefulKnowledgeSession();

    def e = new Evaluation(leftReelValue: spindle.spindle.leftReel.value,
            middleReelValue: spindle.spindle.middleReel.value, rightReelValue: spindle.spindle.rightReel.value, initialised: spindle.initialised)
    ksession.insert(e);

    ksession.fireAllRules();

    ksession.dispose();

    e.getResult()
  }

}
</pre>
          <p>That's it! Plop a few jars on the classpath and we're up and running. Very clean.</p>
          <p>So what does this buy us? Those obsessed with <a href="http://www.developer.com/java/other/article.php/988641">SLOC</a> or 'efficiency' would be quick to say "nothing." IMHO, this may well be short-sighted and probably quite wrong.</p>
          <p>For one thing, none of the rest of the application outside of the EvaluatorService is 'infected' by the need for rule handling <em>at all</em>. This is A Good Thing.</p>
          <p>Another benefit is that this gets us to a situation where adding rules is easy. So far the rules defining the winning combinations are few and simple: all 3 reels must have the same value, with a 'bonus' if that value is 3:</p>
          <p><img src="wp-content/uploads/2008/12/pokie-smallwin.jpg"> <img src="wp-content/uploads/2008/12/pokie-bigwin.jpg"></p>
          <p>In a fit of unexpected generosity, let's make it easier to win by adding a few new winning patterns:</p>
          <p><img src="wp-content/uploads/2008/12/pokie-winasc.jpg"> <img src="wp-content/uploads/2008/12/pokie-windesc.jpg"></p>
          <p>With Drools, <em>very little</em> extra work is needed. Only a slight mostly cosmetic modification of the GSP and the addition of a couple of new values in the EvaluatorResult enum are required to support the addition of a few more
          rules to the ruleset, viz:</p>
          <pre>
...
rule "MEDIUM Win 0 &gt; 1 &gt; 2; ASC"
     salience 1
     dialect "mvel"
     lock-on-active
     activation-group "pokie"
  when
      e : Evaluation(initialised == true,
        (leftReelValue == (middleReelValue + 1)) &amp;& (middleReelValue == (rightReelValue + 1)))
  then
     modify ( e ) { result = EvaluatorResult.MEDIUMWIN_ASC };
end

rule "MEDIUM Win 0 &lt; 1 &lt; 2; DSC"
     salience 1
     dialect "mvel"
     lock-on-active
     activation-group "pokie"
  when
      e : Evaluation(initialised == true,
        (leftReelValue == (middleReelValue - 1)) &amp;& (middleReelValue == (rightReelValue - 1)))
  then
     modify ( e ) { result = EvaluatorResult.MEDIUMWIN_DSC };
end
...
</pre>
          <p>These changes have added almost nothing to the complexity of the application but have added some significant new features.</p>
          <p>If you take the time to consider what the 'old' hand-coded evaluator will be starting to look like (a few more 'if's to get one's head around, with a lot nastier <a href=
          "http://www.ibm.com/developerworks/java/library/j-cq03316/">cyclomatic complexity</a>), you will start to get an appreciation of the value of the Drools approach. If you push this example a little further and consider that a real pokie
          would have rules for dealing with everything from dealing with maintenance needs and hardware faults through determining an response to a network outage to dealing with customer loyalty cards and you will see that even a simple system can
          get complex very quickly; the original simple evaluate() method has ballooned out into a module…</p>
          <p>Now, I am the first to admit that this is a very simple example and not at all a good use-case for a rules engine like Drools: it is far too simple and the problem doesn't really have a multitude of cross-cutting rules and <a href=
          "http://books.google.com/books?id=FyWZt5DdvFkC&amp;pg=PT31&amp;lpg=PT31&amp;dq=business+illogic+fowler&amp;source=bl&amp;ots=eEzpYC-sdw&amp;sig=CoxMfftoeeBS2wLhJFIqmKQhgXY&amp;hl=en&amp;sa=X&amp;oi=book_result&amp;resnum=1&amp;ct=result">business
          illogic</a> that would <a href="http://downloads.jboss.com/drools/docs/4.0.7.19894.GA/html/ch02s02.html">make Drools a better fit</a>. It has made a nice playpen for understanding and experimenting with Drools however, and I hope that the
          fundamentals have come through: how Drools has kept the application clean and tidy and centralised all the messiness of rule processing into one place. A major benefit of this has been to make the rules themselves explicit, easily
          changeable and amenable to review by an appropriate tame domain expert.</p>
          <p>Of course, if you really feel the need, you can be <a href="http://alice.unibo.it/xwiki/bin/view/Tuprolog/">really clever</a> ;-)</p>
          <p>One of the more interesting uses for Drools is that it is used to provide the underlying <a href="http://chiralsoftware.com/seam-security-rules/jboss-rules.seam">security infrastructure for Seam 2.0</a>.</p>
          <p>The Grails/IntelliJ project for this posting is <a href="wp-content/uploads/2008/12/pokie11.zip">available</a> (requires Grails 1.1).</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Grails, Programming</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <a id='8'></a><h1 class="entry-title">Some Other Very Wise Sayings…</h1>
        <div class="entry-content">
          <p>Both of these speak to my favourite <a href="http://www.merriam-webster.com/dictionary/neurosis">neuroses</a>…</p>
          <p>From <a href="http://www.c2.com/cgi/wiki?DocumentationPatterns">http://www.c2.com/cg … ocumentationPatterns</a>:</p>
          <blockquote>
            <p>Documentation is more likely to be wrong than code, because it has no test cases</p>
          </blockquote>
          <p>From <a href="http://www.agiledeveloper.com/blog/PermaLink.aspx?guid=79f30955-6359-4e10-ba0e-b6a08b659a44">http://www.agiledeve … 10-ba0e-b6a08b659a44</a>:</p>
          <blockquote>
            <p>"Error rate in manual testing is comparable to the bug rate in the code being tested."-Boriz Beizer.</p>
          </blockquote>
          <p>Think about these. <em>Please!</em></p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Agile</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <a id='9'></a><h1 class="entry-title">A Better Way?</h1>
        <div class="entry-content">
          <p>Yet another Lunchtime Conversation; this time about easyb and responses to my earlier posting Green is Good, but easyb may be Even Better….</p>
          <p>Basically, the question was "What's wrong with JUnit, anyway!"</p>
          <p>Well…</p>
          <p>Here is the more 'traditional' JUnit-based (but also Groovy-friendly) <a href="http://code.google.com/p/easyspec">EasySpec</a>:</p>
          <pre>
package org.easyspec.example

import org.easyspec.*

@EasySpec(interest='A character')
class Character_when_freshly_created_Test extends GroovyTestCase {
    def character

    @Context("that has just been created")
    public void setUp() {
        character = new Character('Thorr')
    }

    @Behavior
    public void test_should_have_a_health_level_of_100() {
        assertEquals 100, character.health
    }

    @Behavior
    public void test_should_have_a_name() {
        assertEquals 'Thorr', character.name
    }
}
</pre>
          <p>(this is the basic EasySpec example, by the way…)</p>
          <p>There is also <a href="http://www.theserverside.com/tt/articles/article.tss?l=BDoc">BDoc</a>, which enables 'goodness' such as this:</p>
          <pre>
@Test //Scenario
public void givenIHave200$InMyAccountWhenIAskToWithdraw20$ThenIShouldBeGiven20$AndMyBalanceShouldBe180$() {
  Account account = new Account(200);
  int cashGiven = account.withdraw(20);
  assertEquals(20, cashGiven);
  assertEquals(180, account.balance());
}
</pre>
          <p>Now, I do <strong>NOT</strong> want <em>in any sense</em> to dismiss or belittle these projects, but maybe something more <a href="http://en.wikipedia.org/wiki/Left_field#.22Out_of_left_field.22">"out of left field"</a> might just be
          better…compare the EasySpec example above to an equivalent easyb version:</p>
          <pre>
scenario "Freshly Created Characters Test" {
  given "A character that has just been created" {
    character = new Character('Thorr')
  }
  then "The character should have a health level of 100" {
    character.healthLevel.shouldBe 100
  }
  then "The character should have the name 'Thorr'" {
    character.firstName.shouldBeEqualTo 'Thorr'
  }
}
</pre>
          <p>I know which *I* think wins in oh so many ways: clarity, ease of preparation, lack of strange conventions (all those annotations and strange names…IMHO not so good). Recall from my earlier posting the idea that perhaps a Product Owner
          or Domain Expert could write an easyb story which is then passed on to a developer for further elaboration. Could that be done with either the EasySpec or BDoc versions? I have strong doubts!</p>
          <p>For those absolutely wedded to JUnit, it is probably worth mentioning <a href="http://agiledox.sourceforge.net/">TestDox</a>, which can help to make documentary sense of things. The closest 'competitor' to easyb is the written-in-ruby
          <a href="http://rspec.info/">rspec</a>.</p>
          <p>Again: please don't think that I am trying to "put down" EasySpec, TestDox, BDoc, etc., but it just seems to me that there can be a better way…</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Tools</p><!--/filed-->
      </div><!-- .post -->
      <div class="pagination">
        <span class="next"><a href="34.htm">Next »</a></span> <span class="previous"><a href="32.htm">« Previous</a></span>
      </div>
    </div>
  </div><!--#page-->
</body>
</html>