<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Transentia - transentia pty. ltd.; development, consulting, training at the leading-edge of technology</title>
  <link rel="stylesheet" type="text/css" media="screen, print, handheld" href="wp-content/themes/transentia/css/site.css">
</head>
<body>
  <div id="page">
    <div id="header">
      <p><a href="../index.htm"><img src="wp-content/uploads/widgets/transentia-logo-red-glow.gif" border="0"></a></p>
      <p class="old-content">transentia's old content; click on the logo to return to the new content</p>
      <p id="blog-description">transentia pty. ltd.; development, consulting, training at the leading-edge of technology</p>
    </div><!-- #header -->
    <div id="content">
      <div class="pagination">
        <span class="next"><a href="DUMMY">Next »</a></span> <span class="previous"><a href="DUMMY">« Previous</a></span>
      </div>
      <div class="post hentry">
        <h1 class="entry-title">Goodybye Ant, Hello Gant</h1>
        <div class="entry-content">
          <p>Java developers spend countless hours writing build scripts using <a href="http://ant.apache.org">Apache Ant</a>. Ant is a venerable tool in the Java world, having originated as part of the Tomcat project and venturing out into the big
          bad world as a stand-alone project in the dim days of early 2003.</p>
          <p>Ant is supported by all major IDEs (indeed, it is fair to say that the <a href="http://www.netbeans.org">Netbeans IDE</a> has probably taken the ant build script to new heights of complexity and flexibility) and provdes a platform that
          has made possible the creation of countless plugins.</p>
          <p>Still, Ant has its limitations. Writing XML-based build scripts is a task that gets old…fast! In addition, the XML-based build language makes it hard to express simple things like iteration or conditional execution.</p>
          <p>Enter gant. Gant is the groovy build tool that augments plain old Ant by supplying a clean and powerful groovy-based <a href="http://en.wikipedia.org/wiki/Domain-specific_programming_language">DSL</a>.</p>
          <p>A simple example (incrementing numbered 'log' files) is:</p>
          <pre>
dirLogs = 'logs'
target ( increment : 'Renumber (increment) the files in the logs directory' ) {
  def files = []
  new File(dirLogs).eachFile() { files &lt;&lt; it.name }
  files.sort().reverse().each { 
    index = Integer.valueOf(it - 'log.')
    source = "${dirLogs}/${it}".toString()
    dest = "${dirLogs}/log.${index + 1}".toString()
    new File(source).renameTo(new File(dest))
  }
}

def printLogDir = {
  new File(dirLogs).eachFile() { ant.echo "  ${it.name}" }
}

target ( finish : 'finishing stuff' ) {
  ant.echo '...done.'
  printLogDir()
}

target ( start : 'startup stuff' ) {
  ant.echo 'starting...'
  printLogDir()
}

target ( bumpLogs : 'Log Rotation' ) {
  start()
  increment()
  finish()
}

setDefaultTarget ( bumpLogs )
</pre>
          <p>Note the total absence of the dreaded XML. Note also the degree of sophistication here: this script is actually using a fair bit of Groovy 'goodness': collections, closures, etc. this task would not be so easy in plain Ant.</p>
          <p>Gant is becoming increasingly well supported in the various IDEs and also in tools such as <a href="https://hudson.dev.java.net/">hudson</a>. In addition (and very much in keeping with the Groovy world-view) you don't have to throw
          anything you already have away: all those nice external/third-party Ant tasks still work happily, all those 'legacy' Ant build scripts you have can keep on being used alongside the shiny new gant scripts you will be creating from now
          on…</p>
          <p>If you are a Java developer, do yourself a favour: find out <a href="http://gant.codehaus.org">more about gant</a>.</p>
          <p>Personally, I don't want to write another build.xml file ever again; I'll be sticking with build.gant from now on!</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Grails, Groovy, Programming, Tools</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Gotta Love This Site!</h1>
        <div class="entry-content">
          <p><a href="http://www.c2.com/cgi/wiki">This Wiki</a> ("This was the very first Wiki, the one that started it all.") is a place that starts you off with the <a href="http://www.c2.com/cgi/wiki?ExtremeProgrammingRoadmap">Extreme Programming
          Roadmap</a> and lets you end up at the story of <a href="http://www.c2.com/cgi/wiki?StoneSoup">Stone Soup</a>.</p>
          <p>Along the way, you can be led to the problem of <a href="http://www.c2.com/cgi/wiki?EssentialDifficulty">Essential difficulty in programming</a> or the thorny issue of <a href="http://www.c2.com/cgi/wiki?SurvivingGuruStatus">Surviving
          Guru Status</a>. You may follow through to the <a href="http://www.c2.com/cgi/wiki?ExtremeProgramming">XP</a> tenet of <a href="http://www.c2.com/cgi/wiki?DoTheSimplestThingThatCouldPossiblyWork">Do The Simplest Thing That Could Possibly
          Work</a> or <a href="http://www.c2.com/cgi/wiki?RandomPages">any one</a> of the thousands of pages hosted in the Wiki. All are interesting, some are strange, some irreverent and all provide a great example of how user-contributed
          documentation <em>works</em>.</p>
          <p>Reminds me of a place I once worked at (had a really good time, actually): the team there had tried all sorts of things to get their documentation needs working for them; pretty much nothing did. I suggested a Wiki "…so that you can
          contribute the pages, keep them up to date and capture all the stuff that was 'getting lost' before." I was amazed at the pushback against user contributed/edited content. Seemed to me that the problem mutated into: "But we can't possibly
          show our managers an unstructured mess of pages!" Eventually a Wiki of sorts was adopted; a Wiki that was carefully structured and locked down in precisely the same way as the shelf upon shelf of existing documentation-and having the same
          worth to the organisation. The fundamental 'liveness' was lost, alongside all potential for change and any realisation of value.</p>
          <p>I guess you can take a horse to water….</p>
          <p>Anyway, that isn't the problem here…the "unstructured mess of pages" really works. Take a look-see, but don't blame me if you get <a href="http://en.wikipedia.org/wiki/Colossal_Cave_Adventure">trapped</a>!</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Agile, Tools</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Green is Good, but easyb may be Even Better…</h1>
        <div class="entry-content">
          <p>Long-surpressed, in the back of my mind, a niggling doubt has lurked: perhaps JUnit isn't <a href="http://www.usingenglish.com/reference/idioms/best+thing+since+sliced+bread.html">The Best Thing Since Sliced Bread</a>?</p>
          <p>Don't get me wrong, it is a great tool: powerful, easy to pick up and actually quite elegant in its simplicity. It is fair to say that JUnit has advanced software development practices and raised the profile of testing and continuous
          integration. "Green is Good."</p>
          <p>Two things have worried me however. Firstly: the amount of work I have to put in to actually building all these tests could very well be more than that required to build the 'real' code, and thus represents a cost that not too many
          organisations are actually willing or able to pay.</p>
          <p>The second issue goes like this: how do I know that my tests are actually <em>relevant</em>? I don't mean have they achieved the required coverage but rather, are they testing things that the product owner would get value out of;
          <a href="http://c2.com/xp/YouArentGonnaNeedIt.html">You Ain't Gonna Need It</a> may well apply to tests as well as code.</p>
          <p>Enter <a href="http://easyb.org/">easyb</a>, a so-called <a href="http://en.wikipedia.org/wiki/Behavior_driven_development">Behavior Driven Development</a> tool.</p>
          <p>easyb is a Groovy-driven Domain Specific Language for building executable specifications. It lets your <em>customer</em> write stories that can then be decorated to produce executable tests and the result of these tests can be presented
          back to the customer for validation. To me, this sounds a lot better: I can't for the life of me forsee a situation where I would plonk a customer down in front of my JUnit code…</p>
          <p>Venkat Subramaniam has a <a href="http://www.agiledeveloper.com/presentations%5Cbdd_in_java_and_groovy.pdf">good presentation on easyb</a>.</p>
          <p>An example is useful, I think.</p>
          <p>Consider the following (<a href="http://docs.groovy-lang.org/latest/html/groovy">groovy</a>) Class Under Test:</p>
          <pre>
public class Test {
  def doublePositive = { x -&gt;
    x &lt;= 0 ? x : x * x
  }
}
</pre>
          <p>It is probably not unreasonable (although I have met BAs and PMs that seem to regard themselves as a sort of firewall protecting the customer from the mad-haired, wild-eyed developers) that I could work with a customer to develop the
          following:</p>
          <pre>
description "Testing the Test Class"

narrative """The Test Class is a cornerstone of our application;
the PHB says it had better be correct!""", {
  as_a "Starving Developer"
  i_want "The Test Class to be bug-free"
  so_that "My boss gives me a raise"
}

scenario "0 is given as input", {
  given "A new instance of Test"
  then "Doubling 0 should produce 0"
}

scenario "-1 is given as input", {
  given "A new instance of Test"
  then "doubling -1 should produce -1"
}

scenario "5 is given as input", {
  given "A new instance of Test"
  then "doubling 5 should produce 25"
}
</pre>
          <p>Now the part that brought it on home to me: once the customer is happy that these <strong>stories</strong> are relevant and realistic, I can take the specification and execute it as a <em>pending</em> specification…not particularly
          useful, granted, but a solid start that permits me to incrementally decorate the specification to perform real, useful testing. I end up with the following <strong>tests</strong>:</p>
          <pre>
description "Testing the Test Class"

narrative """The Test Class is a cornerstone of our application;
the PHB says it had better be correct!""", {
  as_a "Starving Developer"
  i_want "The Test Class to be bug-free"
  so_that "My boss gives me a raise"
}

scenario "0 is given as input", {
  given "A new instance of Test", {
    test = new Test()
  }
  then "Doubling 0 should produce 0", {
    test.doublePositive(0).shouldBe 0
  }
}

scenario "-1 is given as input", {
  given "A new instance of Test", {
    test = new Test()
  }
  then "doubling -1 should produce -1", {
    test.doublePositive(-1).shouldBe(-1)
  }
}

scenario "5 is given as input", {
  given "A new instance of Test", {
    test = new Test()
  }
  then "doubling 5 should produce 25", {
    test.doublePositive(5).shouldBe 25
  }
}
</pre>
          <p>I also get a nice report that I can allow the customer to oversee:</p>
          <pre>
3 scenarios executed successfully

  Story: test story
   Description: Testing the Test Class
   Narrative: The Test Class is a cornerstone of our application; the PHB says it had better be correct!
      As a Starving Developer
      I want The Test Class to be bug-free
      So that My boss gives me a raise

    scenario 0 is given as input
      given A new instance of Test
      then Doubling 0 should produce 0

    scenario -1 is given as input
      given A new instance of Test
      then doubling -1 should produce -1

    scenario 5 is given as input
      given A new instance of Test
      then doubling 5 should produce 25
</pre>
          <p>If something were wrong with the Class Under Test, it is clear in the execution trace (for interest, note the use of <a href="http://gant.codehaus.org/">gant</a> as my build tool of choice for this little exercise):</p>
          <pre>
C:DEVELOPMENTEB&gt;gant
    [easyb] easyb is preparing to process 1 file(s)
    [easyb] Running test story story (TestStory.story)
    [easyb] FAILURE Scenarios run: 3, Failures: 1, Pending: 0, Time Elapsed: 0.2 81 sec
    [easyb]     "doubling -1 should produce -1" -- expected -1 but was 1
    [easyb] 3 total behaviors run with 1 failure
    [easyb] easyb execution FAILED
Execution halted as behaviors failed

C:DEVELOPMENTEB&gt;
</pre>
          <p>It is also clear in the report:</p>
          <pre>
 scenarios executed, but status is failure! Total failures: 1

  Story: test story
   Description: Testing the Test Class
   Narrative: The Test Class is a cornerstone of our application; the PHB says it had better be correct!
      As a Starving Developer
      I want The Test Class to be bug-free
      So that My boss gives me a raise

    scenario 0 is given as input
      given A new instance of Test
      then Doubling 0 should produce 0

    scenario -1 is given as input
      given A new instance of Test
      then doubling -1 should produce -1 [FAILURE: expected -1 but was 1]

    scenario 5 is given as input
      given A new instance of Test
      then doubling 5 should produce 25
</pre>
          <p>Note that the easyb report is 'live': it isn't stuck away in a Word document somewhere to slowly decay into irrelevance, it clearly shows the result of the test and will continue to do so. This is particularly important when one is
          using <a href="http://martinfowler.com/articles/continuousIntegration.html">continuous integration</a>.</p>
          <p>To recap: I now have a sequence of stories, written for, or perhaps <em>by</em>, my customer that I-as a developer-am using as the basis for my test regime.</p>
          <p>This I like!</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Tools</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">No Clean Feed!</h1>
        <div class="entry-content">
          <p>If you find the Australian government's "Clean Feed" Net Filtering 'initiative' as ridiculous and <em>worrying</em> as I do, why not <a href="http://yro.slashdot.org/comments.pl?sid=1025295&amp;cid=25727179">contact the labour
          politicians responsible for this mess</a>, check <a href="http://nocleanfeed.com/">http://nocleanfeed.com/</a> or follow up with <a href="http://www.efa.org.au/">http://www.efa.org.au/</a></p>
          <p>Leaving aside the obvious technical impossibilities, IMHO this issue speaks to education, personal responsibility and responsible parenting (difficult, I know).</p>
          <p>Probably a better alternative approach is described at <a href="http://forums.overclockers.com.au/showpost.php?p=9724645&amp;postcount=15">http://forums.overcl … 45&amp;postcount=15</a>:</p>
          <blockquote>
            <p>The best and easiest solution would be to offer a 100% tax rebate (refunded with a tax return) to anyone who purchases their choice of commercially available internet filter from the existing market place.</p>
          </blockquote>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Rant</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Mea Culpa, Mea Culpa…Doing Ourselves a Disservice</h1>
        <div class="entry-content">
          <p>This has been on my mind for a while, so bear with me…</p>
          <p>I have just watched a whole series of vendors stand up and talk about their products. The message was always the same: "we realise that our products are hard to use for you to use without (gasp!) training, that we use too many <a href=
          "http://en.wikipedia.org/wiki/Three-letter_abbreviation">TLAs</a> so you can't understand us easily, that we behave too much like specialists and don't 'connect' with you on your terms, etc., etc. Mea Culpa, Mea Culpa, Mea Maxima
          Culpa."</p>
          <p>Now, I understand that a vendor probably <em>has</em> to take this approach…he/she most likely wouldn't make too many sales otherwise (try to imagine a sales pitch concluding with: "…and you are required to purchase sufficient training
          and to devote sufficient time and effort to ensure that you are using our product correctly." it ain't gonna happen [and for some perfectly good reasons, too]). I do worry about this, though. Complex products that address complex
          requirements are hard to use…no amount of wishing/denial is going to change this fundamental (consider please a <a href="http://www.cncmotion.com/lathe.htm">computer numerically-controlled lathe</a>). All specialists have their domain
          languages and we do ourselves a disservice by pretending otherwise. Let's face it as well: would you <em>really</em> expect to consult with a top-surgeon only to be told "we need to go snippetty-snippety on the pink dangly bit here."</p>
          <p>This issue of Mea Culpa seems to go deep: I have just finshed Certified ScrumMaster training. In Scrum, a fair proportion of the ScrumMaster's role involves working with the Product Owner to ensure that what is happening in the team is
          visible and appropriate for the needs of the project. There are no real requirements placed on the Product Owner other than to 'represent' the business. To my mind, there is an obvious imbalance here: while the dev. team has to work hard
          to be seen as working clearly, quantifiably making progress, ec. etc. there is no such requirement placed upon the Product Owner, who (as far as Scrum is concerned) may as well be handing down Product Backlog Items on tablets delivered
          from above.</p>
          <p>Spot the issue? Clearly, development has such a highly problematic history (Mea Culpa) that it must be able to be overseen by all and sundry to make sure that things don't go badly off the rails (Mea Culpa). Where, pray, is the
          requirement on "the Business" to work in an <em>equally</em> transparent way so that the dev. team can oversee and have visibility into the way that requirements are gathered, analysed, presented, etc.? Organisations are regularly seen
          asking for developers with <em>n+</em> years experience in products only <em>n-1</em> years old ("just to be safe", it appears) while at the same time feel free to ask for BAs with little or no training (note that my cat has "Demonstrated
          ability to be able to communicate to a wide variety of people from all levels of an organisation"). Harsh words, perhaps. I am sure that <a href="http://www.agilemodeling.com/essays/agileAnalysis.htm">Agile Analysis</a> exists, I just
          don't see too many job adverts. Meanwhile <a href="http://en.wikipedia.org/wiki/PRINCE2">PRINCE2</a> project management is gaining popularity in leaps and bounds since it is obvious that if a big hammer isn't doing the job then a bigger
          one is clearly needed).</p>
          <p>Who knows, if both sides worked equally hard, if <em>both</em> sides admitted Mea Culpa, we would get real improvement…it certainly won't come about if this fake and ineffectual tendency to take on blame continues.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Rant</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">I am now Certified…</h1>
        <div class="entry-content">
          <p>…as a Certified ScrumMaster.</p>
          <p>I have just completed a two-day SCM training course, let by <a href="http://www.scrumalliance.org/profiles/398-rowan-b-bunning">Mr. Rowan B. Bunning</a>.</p>
          <p>I found the course enjoyable and well-presented.</p>
          <p>For posterity, <a href="http://blog.softwarewithstyle.com/2008/11/29/new-brisbane-csms.aspx">here is a piccy</a>, courtesy of Rowan.</p>
          <p>I find the primary idea underlying Scrum appealing: Scrum comes from the realisation that up-front, in-toto planning simply doesn't work and that structuring a project as a series of time-boxed iterations may well be a more successful
          approach. There is more than this of course (the ideas behind the <a href="http://agilemanifesto.org/">Agile Manifesto</a>, self-organising teams, highly visible/quantified progress indicators, shared responsibility for success and/or
          failure, etc.) but that is the fundamental driver.</p>
          <p>I still can't shake the feeling, however, that it's going to be a rare organisation that is brave enough to allow some of Scrum's features to be applied without change: how many enterprises (the natural home of the <a href=
          "http://en.wikipedia.org/wiki/Pointy-Haired_Boss">PHB</a>) are there out there really capable of daring "safe-fail rather than fail-safe"?</p>
          <p>Still, it's another string to my bow and may prove useful. Every good developer should aim to be a useful "cross functional team member", after all!</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Agile</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">What Features Characterise "Enterprise Applications"?</h1>
        <div class="entry-content">
          <p>This topic came up at lunch today…it is a contentious issue, but I'll wade in fearlessly!</p>
          <p>It seems to me that although there are <em>many</em> applications used in an enterprise, very few of them are actually deserving of the title "Enterprise."</p>
          <p>I am sure that this is one of those "how long is a piece of string"-type arguments that can't ever be 'won' but one of the best "feature-lists" that seems to cover all the requisite bases is given in the Gartner report <a href=
          "http://mediaproducts.gartner.com/reprints/microsoft/vol3/article2/article2.html">Magic Quadrant for Enterprise Application Servers, 2Q08</a>, which I excerpt here:</p>
          <p>"…a system software product of the following minimal characteristics:</p>
          <ul>
            <li>Offers a "container" implementation for the execution of application software modules (SM):
              <ul>
                <li>The container provides a "programming model" (a set of APIs for use by the SMs).</li>
                <li>The container deploys as a long-running server operating system (OS) task (OS "daemon").</li>
                <li>SMs are programmatically addressable on request remotely through services that are associated with the container.</li>
                <li>The container allocates and uses OS resources (memory, threads, tasks) on behalf of the individual SMs, freeing SM code from the necessity of direct interaction with the OS.</li>
                <li>The container provides resource pooling (database connections and network connections), and the pools are shared by the SMs.</li>
              </ul>
            </li>
            <li>Supports distributed computing (load balancing and failover clustering between container instances).</li>
            <li>Provides an API or other means for authentication and authorization by the container.</li>
            <li>Provides an API or other means for monitoring the status and minimal management (such as start and stop) of the container instance(s).</li>
            <li>Provides an API or other means to access a file system by an SM.</li>
            <li>Provides an API or other means of access to a relational DBMS (RDBMS) by an SM.</li>
            <li>Provides an API or other means of invoking SMs by an SM:
              <ul>
                <li>Within the same container instance</li>
                <li>Across like container instances</li>
                <li>In other unlike container types</li>
              </ul>
            </li>
            <li>Provides an API or other means to demarcate an atomicity, consistency, isolation, durability (ACID)-style transaction by an SM.</li>
          </ul>
          <p>…"</p>
          <p>In addition to all this, <a href="http://martinfowler.com/">Martin Fowler</a>, in the introduction to his book <a href="http://www.amazon.com/Enterprise-Application-Architecture-Addison-Wesley-Signature/dp/0321127420">Patterns of
          Enterprise Architecture</a> gives other properties:</p>
          <ul>
            <li>A lot of persistent data</li>
            <li>Concurrent data access</li>
            <li>A lot of user interface screens</li>
            <li>Integrate with other enterprise applications, often transactionally or in a time-sensitive fashion</li>
            <li>Lots of translation between data formats (usually for integration or reporting)</li>
            <li>Complex business 'illogic'</li>
            <li>A requirement for 'scalability' (meaning the application has to deal with those intangible and ill-defined issues of response time, responsiveness, latency, throughput, load sensitivity and degradation, to name but a few)</li>
          </ul>
          <p>But wait, there's more!</p>
          <p>An Enterprise Application also lives in a <em>context</em>: what is the application's <a href="http://en.wikipedia.org/wiki/Service_level_agreement">Service Level Agreement</a> and <em>how is that monitored</em>; how is that application
          deployed and how is it maintained; how does server/network infrastructure maintenance impact on the application; what logging facilities should be made available and <em>how are those logs to be used</em> (reporting); how is 'uptime'
          defined and managed; etc., etc., etc.</p>
          <p>Don't forget the people! A typical Enterprise Application is not simply "install and forget", indeed, it may resemble an overgrown baby with very particular care and feeding needs; 'nanny' must have a <em>very</em> different skillset to
          that needed by a person skilled at managing a desktop SOE.</p>
          <p>Just because an application is used in an "enterprise", just because it is client-server, just because it is written in Java, C#, C, Python, or <a href="http://compsoc.dur.ac.uk/whitespace/">Whitespace</a>, just because it is running on
          JBoss Application Server, Oracle WebLogic Server, IBM WebSphere, or whatever, just because you have a load balancer in front of a load of disparate server instances, etc. doesn't necessarily make the software worthy of the term
          "Enterprise."</p>
          <p>Not many applications will touch all the bases outlined here, but it should be quite clear that real Enterprise applications are hard to build and that in reality the tag 'Enterprise' is a hard one for an application to earn.</p>
          <p>It should also be quite clear that the tag 'Enterprise' is a hard one for a <em>developer</em> to earn!</p>
          <p>Truthfully, it is hard for a <em>development team</em> to earn. The days when an Enterprise application can be developed by a guy and his (C/Java/C#/…) compiler are (or should be…) long gone. Of course, that one guy can produce good,
          useful software having significant value to its owning enterprise but it is doubtful whether that code will qualify as true "Enterprise" grade stuff.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: SOA</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Another Outstanding Tool: SoapUI</h1>
        <div class="entry-content">
          <p>I have used this tool 'in anger' more than once, to develop and test webservices.</p>
          <p>I often talk to people who have heard the term 'WebService' but don't really understand what they are about and SoapUI is really excellent at showing "what's what." It's also great for helping people understand that "Interfaces Matter;
          Implementation Tool/Language/Organisation Doesn't…"</p>
          <p>Version 2.5 looks even better than what has gone before. Get it: <a href="http://soapui.org">http://soapui.org</a></p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: SOA, Tools</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Documentation: Very Wise Words</h1>
        <div class="entry-content">
          <p>Some of the wisest words ever written about documentation are to be found here: <a href="http://www.implementingscrum.com/2006/12/11/bbq-sauce-sweet-or-hot/">BBQ Sauce. Sweet or Hot?</a>.</p>
          <p>The words are so darned good that I feel simply <em>obligated</em> to show them to you:</p>
          <p><img src="wp-content/uploads/2008/11/docowisewords.gif"></p>
          <p>If this 'clicked' with you, then let me just say that the whole <a href="http://www.implementingscrum.com">Implementing Scrum</a> site is very well worth a good, long read; the explanatory cartoon sequence is outstandingly good,
          IMHO.</p>
          <p>If this didn't 'click' with you, let me just <strong>strongly advise</strong> you to go to the above site and read <em>even more carefully</em>, and ponder…</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Agile</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Documentation: the Bane of Every Consultant's Life!</h1>
        <div class="entry-content">
          <p>Too often I have seen projects get swamped and sidetracked by the desire to produce the perfect documentation set. I recall one project where the attempt to produce the 'perfect' paper trail so completely consumed all available cycles
          that no working code was ever produced!</p>
          <p>I wholeheartedly endorse the <a href="http://agilemanifesto.org/">Agile Manifesto</a> that says, in part: "…we have come to value…Working software over comprehensive documentation…."</p>
          <p>Still there is often a need to produce quality documentation for one's client.</p>
          <p>Just as with software, I am happy to reuse good open-source material.</p>
          <p>I have recently come across ReadySet <a href="http://readyset.tigris.org/">http://readyset.tigris.org/</a>:</p>
          <blockquote>
            <p>ReadySET is an open source project to produce and maintain a library of reusable software engineering document templates.</p>
          </blockquote>
          <p>I am sure that there are other similar document collections "out there", but this set seems to be a good starting point.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Agile</p><!--/filed-->
      </div><!-- .post -->
      <div class="pagination">
        <span class="next"><a href="DUMMY">Next »</a></span> <span class="previous"><a href="../34/34.htm">« Previous</a></span>
      </div>
    </div>
  </div><!--#page-->
  <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script> 
  <script src="js/site.js"></script>
</body>
</html>
