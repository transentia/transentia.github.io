<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Transentia - transentia pty. ltd.; development, consulting, training at the leading-edge of technology</title>
  <link rel="stylesheet" type="text/css" media="screen, print, handheld" href="wp-content/themes/transentia/css/site.css">
</head>
<body>
  <div id="page">
    <div id="header">
      <p><a href="../index.htm"><img src="wp-content/uploads/widgets/transentia-logo-red-glow.gif" border="0"></a></p>
      <p class="old-content">transentia's old content; click on the logo to return to the new content</p>
      <p id="blog-description">transentia pty. ltd.; development, consulting, training at the leading-edge of technology</p>
    </div><!-- #header -->
    <div id="content">
      <div class="pagination">
        <span class="next"><a href="DUMMY">Next »</a></span> <span class="previous"><a href="DUMMY">« Previous</a></span>
      </div>
      <div class="post hentry">
        <h1 class="entry-title">Developing with JavaScript Technologies Courseware: Now DonationWare</h1>
        <div class="entry-content">
          <p><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=6550782">DonationWare!</a> <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=6550782"><img src=
          "https://www.paypal.com/en_AU/i/btn/btn_donate_SM.gif" align="middle" border="0"></a></p>
          <p>I am opening up old courseware to the world on a "pay if you like it" or have it free basis.</p>
          <p>My third offering is <em>Developing with JavaScript Technologies</em>.<br>
          (You will find other offerings in this site's DonationWare Category.)</p>
          <p>This course was created in mid-2002.</p>
          <p>It was created for <a href="http://www.asert.com.au">ASERT</a> but never actually saw the light of day…isn't that sad!</p>
          <p>This was after the dot-com bubble had burst and the ultimately commissioning organisation probably went bust or lost interest or something…I can't remember now!</p>
          <p>The course was pitched at people who wanted a very quick overview of what was then a 'warm', upcoming topic. I tried to show JavaScript in a good light, not just as an adjunct to a browser. This was before Jesse James Garrett thought of
          the term <a href="http://en.wikipedia.org/wiki/Ajax_(programming)">AJAX</a> (reputedly while in the shower)!</p>
          <p>There was plenty of hands-on time. There are quite a few small and simple exercises.</p>
          <p>Here's the 'blurb':</p>
          <div style="padding-left:10px;padding-right:10px;margin-left:20px;margin-right:20px;background:#FFFFCC;">
            <p> </p>
            <p><img src="wp-content/uploads/2009/07/javascript-courseware-donationware.png"></p>
            <p><strong>About The Course</strong><br>
            This is an intensive two-day course designed to provide attendees with sufficient knowledge to incorporate JavaScript into their toolbox of useful technologies. The course is aimed at developers who want to apply JavaScript to their
            browser-based projects, and also for those who need to know how the language and its environment is developing to be applicable in a more widespread context.</p>
            <p><strong>Who Should Attend</strong><br>
            Basic programming experience using a modern programming language such as C, C++, Visual Basic, or Java is required. A rudimentary understanding of object oriented concepts is also useful.</p>
            <p>Participants should also be familiar with, and be able to construct basic web pages using 'raw' HTML, rather than via higher-level tools such as Macromedia Dreamweaver or Microsoft FrontPage.</p>
            <p><strong>Objectives</strong><br>
            This course will provide participants with the ability to:</p>
            <ol>
              <li>Understand the history, purpose and utility of JavaScript as a web technology</li>
              <li>Become familiar with the features of the JavaScript language</li>
              <li>Know how when and where to use JavaScript most effectively</li>
              <li>Form a perspective on industry support and future issues related to the development of JavaScript</li>
              <li>Develop more capable web-based applications using this inexpensive technology option</li>
              <li>Use JavaScript outside of its traditional browser-based confines</li>
            </ol>
            <p>Please note: <em>this course is not intended to be a "JavaScript How-To" and does not focus purely on using JavaScript as a technology integrated into a web browser</em>.</p>
            <p><strong>Topics</strong><br>
            The following key topics will be covered over the two day period:</p>
            <ol>
              <li>Introduction to JavaScript (including an overview of concepts, industry standards, the purpose of the language, comparisons with other similar technologies, multi-tiered and thin client applications, etc.)</li>
              <li>JavaScript and the various browser environments (including the browser object/instance model, event handling, etc.)</li>
              <li>JavaScript techniques (including form validation, graphics, localisation, security, etc.)</li>
              <li>Integrating JavaScript with other technologies such as Java, various W3C recommendations, and the Windows Scripting Host</li>
              <li>Industry support (including browser support, development tools and products, versioning, etc.)</li>
            </ol>
            <p>The course includes a number of practical exercises and case studies designed to highlight the features and application of JavaScript in a variety of situations.</p>
            <p> </p>
          </div>
          <p>The course is now well and truly at End of Life.</p>
          <p>I figure that it would be such a pity for it to end as a set of bits decaying away on my hard disk so I am opening it up to the world on as "as-is" basis:</p>
          <p><a href="wp-content/uploads/2009/07/Developing-with-JavaScript-Technologies-Courseware-DonationWare.3.July.2009.zip">Developing-with-JavaScript-Technologies-Courseware-DonationWare.3.July.2009.zip</a><br>
          (MD5: 3922b66caca1dfda0a0b23c532a68b4d; size: 4,523,559 bytes)</p>
          <p>Some (unfortunately necessary) legalese:</p>
          <ul>
            <li>This content is provided "as-is", with no guarantees.</li>
            <li>Feel free to use it, but not to abuse it (to give a couple of examples: don't make hundreds of copies for friends; don't claim it as your own work).</li>
            <li>I retain copyright, so "<a href="http://en.wikipedia.org/wiki/All_rights_reserved">all rights reserved</a>."
            </li>
          </ul>
          <p>Enjoy!</p>
          <p>If you like it, or have any questions/comments, send me an email ( <em>
          <script type="text/javascript">

                        // obfuscate this stuff...
                        var who = 'javascriptcoursewaredonationware';
                        var a = 'transentia';
                        var b = 'com';
                        var c = 'au';
                        var s = who + '@' + a + '.' + b + '.' + c;
                        document.write(s)
          </script></em> ).</p>
          <p>If you find this material useful, <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=6550782">please consider paying me a small amount</a>: <a href=
          "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=6550782"><img src="https://www.paypal.com/en_AU/i/btn/btn_donate_SM.gif" align="middle" border="0"></a> via PayPal.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: DonationWare</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">XML Overview for Developers Courseware: Now DonationWare</h1>
        <div class="entry-content">
          <p><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=6545233">DonationWare!</a> <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=6545233"><img src=
          "https://www.paypal.com/en_AU/i/btn/btn_donate_SM.gif" align="middle" border="0"></a></p>
          <p>I am opening up old courseware to the world on a "pay if you like it" or have it free basis.</p>
          <p>This is a new thing for transentia!</p>
          <p>My second offering is <em>XML Overview for Developers</em>.<br>
          (You will find other offerings in this site's DonationWare Category.)</p>
          <p>This course was presented all around Australia and Macau between about 2000 and 2002.</p>
          <p>It was often run under the ASERT banner (<a href="http://www.asert.com.au">http://www.asert.com.au</a>) and sometimes under the Software Engineering Australia (SEA, now defunct) banner.</p>
          <p>The course was pitched at people who wanted a very quick (2-3 day) overview of what was then a new, 'hot', upcoming topic.</p>
          <p>A cut-down one-day version was also offered as a public 'informational' course a few times.</p>
          <p>There was plenty of hands-on time. There are quite a few small and simple exercises.</p>
          <p>Eventually, the XML world exploded to such an extent that I couldn't keep tracking the changes (think about the changes the XML Schema language went through, for instance) and there was so much other material around that it was no
          longer cost-effective for me to give the material the care and feeding it needed and I eventually stopped promoting and maintaining it.</p>
          <p>Here's the 'blurb':</p>
          <div style="padding-left:10px;padding-right:10px;padding-top:10px;margin-left:20px;margin-right:20px;background:#FFFFCC;">
            <p><img src="wp-content/uploads/2009/07/xml-courseware-logo.png"></p>
            <p><strong>Description</strong><br>
            This three-day workshop will present an overview of XML-the World-Wide Web Consortium's eXtensible Markup Language. XML is viewed as a key technology that is pushing the Internet 'forward' and enhancing its capacity to support e-commerce
            and foster a viable on-line marketplace. XML is not just about the Internet however, it has many applications in the wider business arena-it is being touted as the standard infrastructure underlying next-generation middleware systems-and
            is finding its way into many products and portions of the enterprise. For example, Microsoft has incorporated support for XML into Internet Explorer and its Office 2000 product suites. XML is also strongly supported by organizations such
            as IBM, Oracle, Sun, Netscape, Hewlett-Packard and Adobe.</p>
            <p><strong>Course Objectives</strong><br>
            Participants will examine the concepts behind XML, the standardization activity occurring in the XML community and also look at how to apply XML with particular reference to deploying XML on the World-Wide Web. The workshop will also
            examine a number of XML-related technologies. Participants will also gain an understanding of how XML can be used to resolve many common data-exchange problems. Through various exercises, they will also gain a hands-on working knowledge
            of that flavour of XML currently supported by Microsoft Internet Explorer 5.</p>
            <p><strong>Audience</strong><br>
            This workshop is suitable for programmers working on Internet or Intranet applications, other developers who need to know how XML will affect their work and people interested in the exchange of data between disparate systems.</p>
            <p>All modules have a strong practical component, which enables each participant to learn from hands-on experience and from others while working alone or in small teams. Participants will also receive a full copy of supporting notes,
            designed to complement the instruction and workshops. Participants should have some prior knowledge of programming and the older, but more widespread, HTML technology.</p>
            <p><strong>Outline of Contents</strong><br>
            <strong>Day 1</strong></p>
            <ul>
              <li>Introduction</li>
              <li>Markup languages</li>
              <li>Introducing XML</li>
              <li>Application areas for XML: information management; searching; database integration; messaging, etc.</li>
              <li>XML structure and syntax</li>
              <li>The Document Type Definition (DTD)</li>
              <li>XML as data: data types and namespaces</li>
            </ul>
            <p><strong>Day 2</strong></p>
            <ul>
              <li>Formatting XML: CSS and XSL</li>
              <li>Extensible Query Language (XSL) Patterns</li>
              <li>Linking with XML: Xlink and Xpointer</li>
            </ul>
            <p><strong>Day 3</strong></p>
            <ul>
              <li>XML Document Object Model (DOM)</li>
              <li>Simple API for XML (SAX)</li>
              <li>XML Gallery (SMIL/HTML+TIME, SVG/VML, MathML, WML, etc.)</li>
            </ul>
            <p> </p>
          </div>
          <p>The course is now well and truly at End of Life.</p>
          <p>I figure that it would be such a pity for it to end as a set of bits decaying away on my hard disk so I am opening it up to the world on as "as-is" basis:</p>
          <p><a href="wp-content/uploads/2009/07/XML-Courseware-DonationWare-3.July.2009.zip">XML-Courseware-DonationWare-3.July.2009.zip</a><br>
          (MD5: 20fbe339e28c952292ca270eedb2f389; size: 8,434,050 bytes)</p>
          <p>Some (unfortunately necessary) legalese:</p>
          <ul>
            <li>This content is provided "as-is", with no guarantees.</li>
            <li>Feel free to use it, but not to abuse it (to give a couple of examples: don't make hundreds of copies for friends; don't claim it as your own work).</li>
            <li>I retain copyright, so "<a href="http://en.wikipedia.org/wiki/All_rights_reserved">all rights reserved</a>."
            </li>
          </ul>
          <p>Enjoy!</p>
          <p>If you like it, or have any questions/comments, send me an email ( <em>
          <script type="text/javascript">

                        // obfuscate this stuff...
                        var who = 'xmlcoursewaredonationware';
                        var a = 'transentia';
                        var b = 'com';
                        var c = 'au';
                        var s = who + '@' + a + '.' + b + '.' + c;
                        document.write(s)
          </script></em> ).</p>
          <p>If you find this material useful, <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=6545233">please consider paying me a small amount</a>: <a href=
          "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=6545233"><img src="https://www.paypal.com/en_AU/i/btn/btn_donate_SM.gif" align="middle" border="0"></a> via PayPal.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: DonationWare</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Lessons From Suncorp's Transition To Agile</h1>
        <div class="entry-content">
          <p>Last night, I attended James Couzens' "<a href="http://www.meetup.com/Scrummaster/calendar/10610273/">fireside chat</a>" on how Suncorp does Agile.</p>
          <p>A few take-aways (I'm paraphrasing, forgive me if this isn't exact but you'll get the gist):</p>
          <ul>
            <li>Agile doesn't stop you making mistakes, but it does let you identify the mistakes earlier…then then (hopefully) you can take appropriate and effective action</li>
            <li>Your Product Owner needs to be able to make <em>real</em> decisions (otherwise you'll suffer looong delays, which warps planning and results in low velocity)</li>
            <li>The relationship between Product Owner and ScrumMaster is very important</li>
            <li>Analysts should run only one sprint ahead or the developers, otherwise everyone's heads are in different 'spaces'</li>
            <li>Work with your Product Owner (and stakeholders) early and often</li>
            <li>When interfacing with other (waterfall/non-Agile) groups, treat their needs as high priority</li>
            <li>Poor information radiation can lead to problems</li>
            <li>Planning Poker works. Nicely.</li>
            <li>Don't focus on showcases…this is a sure way to build up technical debt!</li>
          </ul>
          <p>The key takeway:</p>
          <ul>
            <li>Your "<a href="http://www.scrumalliance.org/articles/105-what-is-definition-of-done-dod">Definition of Done</a>" has a far-reaching effect, so spend time on formulating and reviewing it
            </li>
          </ul>
          <p>Thanks, James!</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Agile</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Groovy Templating Follow-Up</h1>
        <div class="entry-content">
          <p>The ever-vigilant <a href="http://www.asert.com.au">Dr. Paul King</a> has put me straight on my Quick Play With Groovy Templating from a short while back.</p>
          <p>To quote: "Noticed your template blog. Thought this might interest you:"</p>
          <pre>class Thing { int id; String comment }
final template = new groovy.text.XmlTemplateEngine().createTemplate('''
  &lt;things xmlns:gsp='http://groovy.codehaus.org/2005/gsp'&gt;
    &lt;gsp:scriptlet&gt;things.each{&lt;/gsp:scriptlet&gt;
      &lt;thing id='$it.id'&gt;$it.comment&lt;/thing&gt;
    &lt;gsp:scriptlet&gt;}&lt;/gsp:scriptlet&gt;
  &lt;/things&gt;
''')
println template.make(things:[
  new Thing(id: 0, comment: 'Hello, XML Template!'),
  new Thing(id: 1, comment: 'This is another Thing')
])</pre>
          <p>This isn't documented <em>anywhere</em> as far as I can see (although there <em>is</em> <a href="http://docs.groovy-lang.org/latest/html/xref-test/groovy/text/XmlTemplateEngineTest.html">a test</a>). The proof is in the pudding,
          however:</p>
          <p><img src="wp-content/uploads/2009/07/groovy-template-paul-xml.png"></p>
          <p>I somehow feel as if I have been initiated into some secret society: "The Knights Who Know About &lt;gsp:scriptlet&gt;"!</p>
          <p>Thank you, Oh Grand Pooh-Bah Paul.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Groovy, Programming</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">SCARY And Inspiring!</h1>
        <div class="entry-content">
          <p>Just listened to a couple of Al Gore's presentations on climate change (from <a href="http://www.ted.com/">TED</a> 2009):</p>
          <p><a class="externlink" title="Go to http://www.ted.com/talks/al_gore_warns_on_latest_climate_trends.html" href="http://www.ted.com/talks/al_gore_warns_on_latest_climate_trends.html"><em>SCARY</em></a></p>
          <p>And</p>
          <p><a href="http://www.ted.com/talks/al_gore_s_new_thinking_on_the_climate_crisis.html[/url">Inspiring</a>!</p>
          <p>I admire Al Gore's (relatively) new-found sense of purpose and his continuing determination.</p>
          <p>Feeling a bit depressed?</p>
          <p>You'll need some <a href="http://www.ted.com/talks/jill_sobule_sings_to_al_gore.html">entertainment</a>.</p>
          <p>Or a <a href="http://www.ted.com/talks/clifford_stoll_on_everything.html">diversion from Cliff Stoll</a>.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Rant</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Another (Slightly Surprising) Groovy Micro-Benchmark</h1>
        <div class="entry-content">
          <p>Cue some tasty blues: ##Well, I woke up this morning…Had a question I wanted to know…Is a closure def as efficient to call as a method def?##</p>
          <p>(OK…I won't give up my day job to become a famous bluesman…or I wouldn't give up my day job if I had one…which I don't…which makes me feel blue…cue a tasty blues riff…)</p>
          <p>I set out to find out the answer to the burning question stated above.</p>
          <p>I fired up GroovyConsole and wrote exhibit A:</p>
          <pre>def f = { x -&gt;
}

def start = System.currentTimeMillis()

(1..10000000).each { x-&gt; f x }

println "Finished; ${System.currentTimeMillis() - start}"</pre>
          <p>Not rocket science!</p>
          <p>This runs in about 2590ms.</p>
          <p>On to exhibit B:</p>
          <pre>def f(x) {
}

def start = System.currentTimeMillis()

(1..10000000).each { x-&gt; f x }

println "Finished; ${System.currentTimeMillis() - start}"</pre>
          <p>ONLY the first line of the script has changed, note.</p>
          <p>This takes about 4539ms.</p>
          <p>Nearly double the time!</p>
          <p>With Groovy 1.6.3/Java 1.6.0_14. In a newly-started instance of GroovyConsole. After the other had been shut down.</p>
          <p>I admit to being surprised. I had expected a plain old method call to be much faster than a closure invocation (which I had <em>assumed</em> would involve all sorts of 'meta' munging).</p>
          <p>The converse is true.</p>
          <p>Just goes to show, eh!</p>
          <p>I'll have to get hold of Groovy 1.7 and (try to) use it's AST viewer to see what is going on (didn't really help me: the AST tree for the closure version seems simpler, but I don't know whether than translates to real code…)</p>
          <p>As always: don't read too much into this, it isn't the end of the world, YMMV, etc., etc.</p>
          <p><em>[edit]</em><br>
          This just in from the always-knowledgeable <a href="http://www.asert.com.au">Dr. Paul King</a>:</p>
          <blockquote>
            <p>The over-simplified…answer: Closures probably have more to do but have been highly optimised in the call site code to match what the JVM JITs/caches really well.</p>
          </blockquote>
          <p>Now I know! Thanks, Paul!</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Groovy, Programming</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">97 Homilies And Platitudes, At $0.77 Each</h1>
        <div class="entry-content">
          <p>Just purchased and read <a href="http://oreilly.com/catalog/9780596522698/index.html#top">97 Things Every Software Architect Should Know</a>:</p>
          <p><img src="wp-content/uploads/2009/07/97-things.jpg"></p>
          <p>"In this truly unique technical book…" you will get a collection of homilies and platitudes about life as a software architect. Some will be useful and thought-provoking, some…not so much. It is an interesting read, regardless. It's
          just the sort of book to have at hand while waiting for a bus, or to keep the eyes/brain engaged during a 10-minute lull before the next storm rolls into your life.</p>
          <p>As for the price…now that I have read it, and understand more clearly that the production costs were essentially zero, I feel ripped off! After all:</p>
          <blockquote>
            <p>…This book is probably completely different from any other book you've read. It is the combined work of more than four dozen authors, all of whom donated their thoughts and advice about software architecture without compensation.</p>
          </blockquote>
          <p>Don't get me wrong: I enjoyed the book well enough, but the sticker shock…hmmm :-(</p>
          <p>Gotta admire <a href="http://www.monson-haefel.com/">Richard Monson-Haefel</a> for finding a new, painless way to get into print!</p>
          <p>There's a <a href="http://97-things.near-time.net/wiki">follow-up website</a>; wish I'd found it before shelling out hard-earned (and increasingly rare) $ on the book!</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Books</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Curiosity Killed The Cat…Dunno What It's Doing To Me!</h1>
        <div class="entry-content">
          <p>Over on <a href="http://codetojoy.blogspot.com/2008/01/mytunes-groovy-and-jfugue.html">Code To Joy</a> there is a nice discussion of <a href="http://www.jfugue.org/">JFugue, the Java API for Music Programming</a> and Groovy.</p>
          <p>The comment was made:</p>
          <blockquote>
            <p>… I wonder what a stack trace sounds like ;-)</p>
          </blockquote>
          <p>I wondered too!</p>
          <p>The answer was…boring!</p>
          <p>A bit of munging made it just a bit less boring:</p>
          <pre>import org.jfugue.*

def munge(s) {
  (s.findAll { it ==~ /[A-Ga-g]/ } as Set).join(' ')
}

Exception.metaClass.play = { new Player().play(new Pattern(munge(delegate.toString()))) }

new IllegalArgumentException(/Don't give me that!/).play()
new ArrayIndexOutOfBoundsException(/Don't give me that!/).play()</pre>
          <p>There's also <a href="http://netbeans.dzone.com/news/ode-build-scripts">Ode to Build Scripts</a>!</p>
          <p>As my dear departed mother always said: <em>little things please little minds</em>…</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Groovy, Programming</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">A Quick Play With Groovy Templating</h1>
        <div class="entry-content">
          <p>I just had the <a href="http://www.nabble.com/XML-endering-bug---td24237722.html">occasion</a> to play with <a href="http://docs.groovy-lang.org/latest/html/Groovy+Templates">Groovy Templates</a> to produce XML.</p>
          <p>First I played with the actual <a href="http://docs.groovy-lang.org/latest/html/api/groovy/text/XmlTemplateEngine.html">groovy.text.XmlTemplateEngine</a>, thusly:</p>
          <pre>import groovy.text.XmlTemplateEngine

class Thing {
  int id
  String comment
  }

final engine = new XmlTemplateEngine()
final thingTemplateEngine = engine.createTemplate('''&lt;thing id='$id'&gt;$comment&lt;/thing&gt;''')

def sb = new StringBuilder()
sb &lt;&lt; '&lt;things&gt;' &lt;&lt; 'n'
[new Thing(id: 0, comment: 'Hello, XML Template!'), 
 new Thing(id: 1, comment: 'This is another Thing')].each {
  sb &lt;&lt; thingTemplateEngine.make([id: it.id, comment: "${it.comment}"]).toString()
}
sb &lt;&lt; '&lt;/things&gt;'

println sb</pre>
          <p>This produces:</p>
          <pre>&lt;things&gt;
&lt;thing id='0'&gt;
  Hello, XML Template!
&lt;/thing&gt;
&lt;thing id='1'&gt;
  This is another Thing
&lt;/thing&gt;
&lt;/things&gt;</pre>
          <p>Note that XmlTemplateEngine can actually do validation during construction, so if (unlike with this example) you have a schema/DTD defined, you can ensure that what you generate is valid XML. For some applications, this can be quite
          important.</p>
          <p>This is not too shabby, but still a bit messy and 'bitty': creating a &lt;thing&gt; is simple, but creating the &lt;things&gt; root element and adding the &lt;thing&gt; children feels like a hack to me (there seems little benefit over
          plain string concatenation, IMHO) and seems to prevent the possibility of checking against a schema/DTD for the resulting document as a whole.</p>
          <p>Groovy offers a second template engine, the <a href="http://docs.groovy-lang.org/latest/html/api/groovy/text/SimpleTemplateEngine.html">groovy.text.SimpleTemplateEngine</a>, viz:</p>
          <pre>import groovy.text.SimpleTemplateEngine

class Thing {
  int id
  String comment
  }

final thingsTemplate = '''&lt;things&gt;
&lt;% things.each{ thing -&gt;
  out &lt;&lt; """  &lt;thing id='$thing.id'&gt;$thing.comment&lt;/thing&gt;
"""
}%&gt;&lt;/things&gt;'''

final engine = new SimpleTemplateEngine()
final thingsTemplateEngine = engine.createTemplate(thingsTemplate)

println thingsTemplateEngine.make(things: [new Thing(id: 0, comment: 'Hello, XML Template!'),
                                           new Thing(id: 1, comment: 'This is another Thing')]).toString()</pre>
          <p>This is a much more general-purpose tool and supports an embedded GSP-style expression syntax that can help make the task at hand cleaner.</p>
          <p>The result is essentially the same:</p>
          <pre>&lt;things&gt;
  &lt;thing id='0'&gt;Hello, XML Template!&lt;/thing&gt;
  &lt;thing id='1'&gt;This is another Thing&lt;/thing&gt;
&lt;/things&gt;</pre>
          <p>Note that SimpleTemplateEngine knows nothing about XML so (as far as the generation of valid XML goes) <em>caveat emptor</em> applies.</p>
          <p>There is a third template engine, but I'm not going to talk about <a href="http://docs.groovy-lang.org/latest/html/api/groovy/text/GStringTemplateEngine.html">GStringTemplateEngine</a> here.</p>
          <p>Be sure to keep in mind that these engines are <em>text-processing</em> tools: I am hacking XML here, but they have much wider applicability.</p>
        </div><!--/entry-content-->
        <p class="filed tags">Tags: Groovy, Programming</p><!--/filed-->
      </div><!-- .post -->
      <div class="post hentry">
        <h1 class="entry-title">Times Must Be Tough For Spammers Too</h1>
        <div class="entry-content">
          <p>I just got a piece of spam with the subject line: "Open this, damn you" :-)</p>
          <p>I didn't open it, though!</p>
        </div><!--/entry-content-->
      </div><!-- .post -->
      <div class="pagination">
        <span class="next"><a href="DUMMY">Next »</a></span> <span class="previous"><a href="../16/16.htm">« Previous</a></span>
      </div>
    </div>
  </div><!--#page-->
  <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script> 
  <script src="js/site.js"></script>
</body>
</html>
